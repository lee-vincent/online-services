// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: auth/steam.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Improbable.OnlineServices.Proto.Auth.Steam {

  /// <summary>Holder for reflection information generated from auth/steam.proto</summary>
  public static partial class SteamReflection {

    #region Descriptor
    /// <summary>File descriptor for auth/steam.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SteamReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBhdXRoL3N0ZWFtLnByb3RvEgphdXRoLnN0ZWFtGhxnb29nbGUvYXBpL2Fu",
            "bm90YXRpb25zLnByb3RvIjAKGUV4Y2hhbmdlU3RlYW1Ub2tlblJlcXVlc3QS",
            "EwoLc3RlYW1fdG9rZW4YASABKAkiOwoaRXhjaGFuZ2VTdGVhbVRva2VuUmVz",
            "cG9uc2USHQoVcGxheWVyX2lkZW50aXR5X3Rva2VuGAEgASgJMpgBCgtBdXRo",
            "U2VydmljZRKIAQoSRXhjaGFuZ2VTdGVhbVRva2VuEiUuYXV0aC5zdGVhbS5F",
            "eGNoYW5nZVN0ZWFtVG9rZW5SZXF1ZXN0GiYuYXV0aC5zdGVhbS5FeGNoYW5n",
            "ZVN0ZWFtVG9rZW5SZXNwb25zZSIjgtPkkwIdIhgvdjEvZXhjaGFuZ2Vfc3Rl",
            "YW1fdG9rZW46ASpCLaoCKkltcHJvYmFibGUuT25saW5lU2VydmljZXMuUHJv",
            "dG8uQXV0aC5TdGVhbWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.OnlineServices.Proto.Auth.Steam.ExchangeSteamTokenRequest), global::Improbable.OnlineServices.Proto.Auth.Steam.ExchangeSteamTokenRequest.Parser, new[]{ "SteamToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.OnlineServices.Proto.Auth.Steam.ExchangeSteamTokenResponse), global::Improbable.OnlineServices.Proto.Auth.Steam.ExchangeSteamTokenResponse.Parser, new[]{ "PlayerIdentityToken" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ExchangeSteamTokenRequest : pb::IMessage<ExchangeSteamTokenRequest> {
    private static readonly pb::MessageParser<ExchangeSteamTokenRequest> _parser = new pb::MessageParser<ExchangeSteamTokenRequest>(() => new ExchangeSteamTokenRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExchangeSteamTokenRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.OnlineServices.Proto.Auth.Steam.SteamReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeSteamTokenRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeSteamTokenRequest(ExchangeSteamTokenRequest other) : this() {
      steamToken_ = other.steamToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeSteamTokenRequest Clone() {
      return new ExchangeSteamTokenRequest(this);
    }

    /// <summary>Field number for the "steam_token" field.</summary>
    public const int SteamTokenFieldNumber = 1;
    private string steamToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SteamToken {
      get { return steamToken_; }
      set {
        steamToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExchangeSteamTokenRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExchangeSteamTokenRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SteamToken != other.SteamToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SteamToken.Length != 0) hash ^= SteamToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SteamToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SteamToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SteamToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExchangeSteamTokenRequest other) {
      if (other == null) {
        return;
      }
      if (other.SteamToken.Length != 0) {
        SteamToken = other.SteamToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SteamToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExchangeSteamTokenResponse : pb::IMessage<ExchangeSteamTokenResponse> {
    private static readonly pb::MessageParser<ExchangeSteamTokenResponse> _parser = new pb::MessageParser<ExchangeSteamTokenResponse>(() => new ExchangeSteamTokenResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExchangeSteamTokenResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.OnlineServices.Proto.Auth.Steam.SteamReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeSteamTokenResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeSteamTokenResponse(ExchangeSteamTokenResponse other) : this() {
      playerIdentityToken_ = other.playerIdentityToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeSteamTokenResponse Clone() {
      return new ExchangeSteamTokenResponse(this);
    }

    /// <summary>Field number for the "player_identity_token" field.</summary>
    public const int PlayerIdentityTokenFieldNumber = 1;
    private string playerIdentityToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerIdentityToken {
      get { return playerIdentityToken_; }
      set {
        playerIdentityToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExchangeSteamTokenResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExchangeSteamTokenResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerIdentityToken != other.PlayerIdentityToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerIdentityToken.Length != 0) hash ^= PlayerIdentityToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerIdentityToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerIdentityToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerIdentityToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerIdentityToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExchangeSteamTokenResponse other) {
      if (other == null) {
        return;
      }
      if (other.PlayerIdentityToken.Length != 0) {
        PlayerIdentityToken = other.PlayerIdentityToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerIdentityToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
